#include "VInc.fxx"
#include "inport.dummy"

#include "CommonDeferredShadingFunc.fxh"

// 1 is terrain
int		g_IsTerrain;
// 1 is path
int		g_IsPath;

VertexOutput vs_main( VertexInput Input )
{
	// VS 2 Semantic
	VertexTrans vssem = (VertexTrans)0;
	VertexTransInit ( Input, vssem );

	// VS do
	V3D_VS_Modifiers ( vssem );

	// Save depth
	vssem.mDiffuseUV.xy = mul( float4( vssem.mLocalPos.xyz, 1), g_World ).yy;//vssem.mLocalPos.yy;//vssem.mWorldPos.yy;//mul( float4( vssem.mLocalPos.xyz, 1), g_World ).yy;

	// Semantic 2 VS-Out
	VertexOutput Output =(VertexOutput)0;
	VertexTransToVertexOutput ( vssem, Output );

	return Output;
}

struct PSOut_LightDepth
{
    float4	Color	: COLOR0;
};

PSOut_LightDepth	ps_main(PixelInput Input)
{
	PSOut_LightDepth o = (PSOut_LightDepth)0;

	float4 finalColor = float4(0,0,0,1);

	// Depth Z Value
	finalColor.r = Input.mDiffuseUV.x;

	o.Color = finalColor;
	return o;
}

technique DepthMap
{
   pass pass_depthmap
   {
		VertexShader = compile vs_3_0 vs_main();
		PixelShader = compile ps_3_0 ps_main();
	}
}
