#include "VInc.fxx"
#include "inport.dummy"
#include "CommonDeferredShadingFunc.fxh"

float2		g_InvScreenSize;
float2		g_ScreenSize;
texture 		RT_SRC;
sampler2D Samp_RT_SRC = sampler_state
{
	Texture = <RT_SRC>;
    MipFilter = LINEAR;
    MinFilter = LINEAR;
    MagFilter = LINEAR;
    AddressU = CLAMP;
    AddressV = CLAMP;
	//SRGBTexture = True;
};

texture MRT_NormalBloomSpecular;
sampler2D Samp_MRT_NormalBloomSpecular = sampler_state
{
	Texture = <MRT_NormalBloomSpecular>;
    MipFilter = POINT;
    MinFilter = POINT;
    MagFilter = POINT;
};

struct VSInput
{
	float3 Pos		: LOCALPOS;
	float2 UV		: DIFFUSEUV;
};
VSInput dummyVSIn;

struct VSOutput
{
    float4 Pos		: POSITION;
    float2 UV		: TEXCOORD0;
//	float4 PosProj : TEXCOORD8;
};
struct PSOutput
{
    float4	Color	: COLOR0;
};

VSOutput vs_main( VSInput Input )
{
	VSOutput o=(VSOutput)0;
//	Input.Pos.xy += float2(-1,1) * g_InvScreenSize;
	o.Pos	= float4(Input.Pos,1);
//	o.PosProj	= float4(Input.Pos,1);
	o.UV		= Input.UV;

#ifdef D3D_EFFECT
	o.Pos.xy += float2(-1,1) * g_InvScreenSize;
#else
	//o.UV.y = 1 - o.UV.y;
#endif

    return o;
}

PSOutput	ps_main( VSOutput Input )
{
	PSOutput o = (PSOutput)0;

//	float2 uv = Input.UV+0.5*g_InvScreenSize;
	float2 uv = Input.UV;

	float4 c = vise_tex2D(Samp_RT_SRC, uv);

	float4		nbs = vise_tex2D(Samp_MRT_NormalBloomSpecular, uv);
	half2			BloomShininess = DecodeBloomShininess(nbs.z);
	float			bloom = BloomShininess.x;

	o.Color = float4(c.rgb * bloom, 0);

	return o;
}

#ifdef D3D_EFFECT
technique Bloom
{
   pass p0
   {
		VertexShader = compile vs_3_0 vs_main();
		PixelShader = compile ps_3_0 ps_main();
	}
}
#endif