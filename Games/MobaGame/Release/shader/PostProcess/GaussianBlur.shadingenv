#include "VInc.fxx"
#include "inport.dummy"

float2		g_InvScreenSize;
float2		g_ScreenSize;
texture 		RT_SRC;
sampler2D Samp_RT_SRC = sampler_state
{
	Texture = <RT_SRC>;
    MipFilter = POINT;
    MinFilter = LINEAR;
    MagFilter = LINEAR;
    AddressU = CLAMP;
    AddressV = CLAMP;
};

// 0£ºBox Blur
// 1£ºGaussian Blur
float				g_BlurType;
float				g_BlurOrientation;
float				g_BlurAmount;

float			g_BlurScale = 1;
float			g_BlurStrength = 0;

/// <summary>
/// Gets the Gaussian value in the first dimension.
/// </summary>
/// <param name="x">Distance from origin on the x-axis.</param>
/// <param name="deviation">Standard deviation.</param>
/// <returns>The gaussian value on the x-axis.</returns>
float Gaussian (float x, float deviation)
{
	return (1.0 / sqrt(2.0 * 3.141592 * deviation)) * exp(-((x * x) / (2.0 * deviation)));	
}

struct VSInput
{
	float3 Pos		: LOCALPOS;
	float2 UV		: DIFFUSEUV;
};
VSInput dummyVSIn;

struct VSOutput
{
    float4 Pos		: POSITION;
    float2 UV		: TEXCOORD0;
};
struct PSOutput
{
    float4	Color	: COLOR0;
};

VSOutput vs_main( VSInput Input )
{
	VSOutput o=(VSOutput)0;
	o.Pos	= float4(Input.Pos ,1);
	o.UV		= Input.UV;

#ifdef D3D_EFFECT
	o.Pos.xy += float2(-1,1) * g_InvScreenSize;
#else
	//o.UV.y = 1 - o.UV.y;
#endif

    return o;
}

PSOutput	ps_main( VSOutput Input )
{
	PSOutput o = (PSOutput)0;

//	float2 uv = Input.UV + 0.5*g_InvScreenSize;
	float2 uv = Input.UV;

	float halfBlur = float(g_BlurAmount) * 0.5;
	float4 colour;

	float deviation = halfBlur * 0.35;
	deviation *= deviation;
	float strength = 1.0 - g_BlurStrength;

	o.Color=float4(0,0,0,0);
	
	if(g_BlurOrientation>0)
	{
		float sampleOffset = g_InvScreenSize.y;
		for (int i = 0; i < 10; ++i)
		{
			if ( i >= g_BlurAmount )
				break;
			
			float offset = float(i) - halfBlur;
			if(g_BlurType>0)
			{
				o.Color += vise_tex2D(Samp_RT_SRC,uv+float2(0.0, offset * sampleOffset * g_BlurScale)) * Gaussian(offset * strength, deviation);
			}
			else
			{
				o.Color += vise_tex2D(Samp_RT_SRC, uv + float2(0,offset * sampleOffset * g_BlurScale));
			}
		}
	}
	else
	{
		// Blur horizontal
		float sampleOffset = g_InvScreenSize.x;
		for (int i = 0; i < 10; ++i)
		{
			if ( i >= g_BlurAmount )
				break;
			
			float offset = float(i) - halfBlur;
			if(g_BlurType>0)
			{
				o.Color += vise_tex2D(Samp_RT_SRC,uv+float2(offset * sampleOffset * g_BlurScale,0.0f)) * Gaussian(offset * strength, deviation);
			}
			else
			{
				o.Color += vise_tex2D(Samp_RT_SRC, uv + float2(offset * sampleOffset * g_BlurScale,0));
			}
		}
	}

	if(g_BlurType>0)
	{
//		o.Color = clamp(o.Color,0,1);
//		o.Color.w = 1;
	}
	else
	{
		o.Color /= g_BlurAmount;
//		o.Color.w = 1;
	}

	return o;
}

#ifdef D3D_EFFECT
technique Blur
{
   pass p0
   {
		VertexShader = compile vs_3_0 vs_main();
		PixelShader = compile ps_3_0 ps_main();
	}
}
#endif