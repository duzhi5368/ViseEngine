#include "VInc.fxx"

#include "CommonDeferredShadingFunc.fxh"

#include "inport.dummy"


float4x4 	g_matViewToDecal;

texture MRT_Depth;
sampler2D Samp_MRT_Depth = sampler_state
{
	Texture = <MRT_Depth>;
    MipFilter = POINT;
    MinFilter = POINT;
    MagFilter = POINT;
    SRGBTexture = FALSE;
};

texture MRT_NormalBloomSpecular;
sampler2D Samp_MRT_NormalBloomSpecular = sampler_state
{
	Texture = <MRT_NormalBloomSpecular>;
    MipFilter = POINT;
    MinFilter = POINT;
    MagFilter = POINT;
    SRGBTexture = FALSE;
};

struct PSOut_DirLight
{
    float4	Color	: COLOR0;
};

VertexOutput vs_main( VertexInput Input )
{
	// VS 2 Semantic
	VertexTrans vssem = (VertexTrans)0;
	VertexTransInit ( Input, vssem );

	// VS do
	V3D_VS_Modifiers ( vssem );

	// Semantic 2 VS-Out
	VertexOutput Output =(VertexOutput)0;
	VertexTransToVertexOutput ( vssem, Output );

	return Output;
}



PSOut_DirLight	ps_main( PixelInput Input )
{
	// PS 2 Semantic
	PixelMaterialTrans pssem = (PixelMaterialTrans)0;
	PixelInputToMaterial( Input, pssem );

	// PS do
	//V3D_PS_Modifiers ( pssem );

	//--------------------------------------------------
	// WRITE SHADING ENVIRONMENT'S CODE HERE!!!!!
	//--------------------------------------------------
	// Semantic 2 PS-Out

	PSOut_DirLight o = (PSOut_DirLight)0;

	float2 UV = (Input.mProjPos.xy/Input.mProjPos.w + 1)/2;
	UV.y = 1 - UV.y;

	// Deferred Shading Surface Infomations
	float			vZ			= vise_tex2D(Samp_MRT_Depth, UV).x;
	float4		nbs = vise_tex2D(Samp_MRT_NormalBloomSpecular, UV);
	float3	    vNorm = DecodeNormal(nbs.xy);

	// Unpack ViewSpace Position
	float4		Pos		= UnwrapViewPosition( Input.mProjPos, vZ );
	// ViewSpace Eye Dir
	float3		ViewDir		= normalize(Pos.xyz);

	float4 DecalPos = mul( Pos, mul(g_ViewInverse, g_matViewToDecal) );
	if( any( abs(DecalPos.xyz) > DecalPos.w ) )
	{
		discard;
	}
	DecalPos /= DecalPos.w;

	pssem.mDiffuseUV.xy = float2(DecalPos.x, -DecalPos.z)*0.5f + 0.5f;

	DoMaterial(pssem);
	if(g_AlphaTest.x==1)
	{
		if(pssem.mDiffuseColor.a < g_AlphaTest.y)
			discard;
	}
	
//	const float ALPHA_TEST_THRESHOLD = 0.2f;
//	clip(pssem.mDiffuseColor.a - ALPHA_TEST_THRESHOLD);

	o.Color.rgb = pssem.mDiffuseColor.rgb;
	o.Color.w = pssem.mDiffuseColor.a;

	return o;
}

#ifdef D3D_EFFECT
technique tech
{
	pass p0
	{
		VertexShader = compile vs_3_0 vs_main();
		PixelShader = compile ps_3_0 ps_main();
	}
}
#endif