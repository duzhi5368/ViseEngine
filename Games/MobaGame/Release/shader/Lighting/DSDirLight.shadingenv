#include "VInc.fxx"

#include "CommonDeferredShadingFunc.fxh"

#include "CommonLightFunc.fxh"

#include "inport.dummy"

int				g_ShadowType;
float			g_LBRAmount;
float			g_ShadowAlpha;
float			g_Intensity; 
float			g_SpecularIntensity;
float4		g_LightingDiffuse;
float4  		g_LightingAmbient;
float4		g_LightingSpecular;
float4		g_LightingShadow;
float3		g_LightingDir;
float4x4 	g_matViewToLightProj;
float2		g_TextureSize;
int				g_LightingMode;
int				g_DoEdgeDetect;
float			g_ShadowDarkScale;

texture MRT_Albedo;
sampler2D Samp_MRT_Albedo = sampler_state
{
	Texture = <MRT_Albedo>;
    MipFilter = POINT;
    MinFilter = POINT;
    MagFilter = POINT;
    SRGBTexture = FALSE;
};

texture MRT_Depth;
sampler2D Samp_MRT_Depth = sampler_state
{
	Texture = <MRT_Depth>;
    MipFilter = POINT;
    MinFilter = POINT;
    MagFilter = POINT;
    SRGBTexture = FALSE;
};

texture MRT_NormalBloomSpecular;
sampler2D Samp_MRT_NormalBloomSpecular = sampler_state
{
	Texture = <MRT_NormalBloomSpecular>;
    MipFilter = POINT;
    MinFilter = POINT;
    MagFilter = POINT;
    SRGBTexture = FALSE;
};

texture 		RT_OpaqueShadowDepth;
sampler2D Samp_RT_OpaqueShadowDepth = sampler_state
{
	Texture = <RT_OpaqueShadowDepth>;
    MipFilter = LINEAR;
    MinFilter = LINEAR;
    MagFilter = LINEAR;
    AddressU = Border;
    AddressV = Border;
	#ifdef D3D_EFFECT
	BorderColor = 0xFFFFFFFF;
	#endif
    SRGBTexture = FALSE;
};

texture 		T_ShadowSmooth;
sampler2D Samp_T_ShadowSmooth = sampler_state
{
	Texture = <T_ShadowSmooth>;
    MipFilter = LINEAR;
    MinFilter = LINEAR;
    MagFilter = LINEAR;
    SRGBTexture = FALSE;
};

texture 		RT_EdgeDetect;
sampler2D Samp_RT_EdgeDetect = sampler_state
{
	Texture = <RT_EdgeDetect>;
    MipFilter = LINEAR;
    MinFilter = LINEAR;
    MagFilter = LINEAR;
    AddressU = Clamp;
    AddressV = Clamp;
    SRGBTexture = FALSE;
};


struct VSIn_DirLight
{
	float3 Pos		: LOCALPOS;
	float2 UV		: DIFFUSEUV;
};
VSIn_DirLight dummyVSIn;

struct VSOut_DirLight
{
    float4 Pos		: POSITION;
    float2 UV		: TEXCOORD0;
	float4 PosProj	: TEXCOORD8;
};
struct PSOut_DirLight
{
    float4	Color	: COLOR0;
};

VSOut_DirLight vs_main( VSIn_DirLight Input )
{
	VSOut_DirLight o=(VSOut_DirLight)0;
	o.Pos		= float4(Input.Pos,1);
	o.PosProj	= float4(Input.Pos,1);
	o.UV		= Input.UV;

#ifdef D3D_EFFECT
	o.Pos.xy += float2(-1,1) / g_TextureSize;
#else
	o.UV.y = 1 - o.UV.y;
#endif

    return o;
}

float GetMax(float lh,float rh)
{
	if(lh>=rh)
		return lh;
	return rh;
}


PSOut_DirLight	ps_main( VSOut_DirLight Input )
{
	PSOut_DirLight o = (PSOut_DirLight)0;

	float2 uv = Input.UV;

	// Deferred Shading Surface Infomations
	float			vZ			= tex2D(Samp_MRT_Depth, uv).x;
	float4		nbs = tex2D(Samp_MRT_NormalBloomSpecular, uv);
	float3	    vNorm = DecodeNormal(nbs.xy);

	float			SpecularIntensity = nbs.w;
	half2			BloomShininess = DecodeBloomShininess(nbs.z);
	float			Shininiess = BloomShininess.y*256;

	// ViewSpace LightDir
	float3	LightDir	= normalize(mul(float4(g_LightingDir,0), g_View).xyz);

	// Unpack ViewSpace Position
#ifdef D3D_EFFECT
#else
	vZ = vZ * 2 - 1;
#endif
	float4	Pos		= UnwrapViewPosition( Input.PosProj, vZ );
	// ViewSpace Eye Dir
	float3   ViewDir		= normalize(Pos.xyz);

	float3 LightDiff = float3(0,0,0);
	float3 LightSpec = float3(0,0,0);
	float3 L = -LightDir;
	float3 V = -ViewDir;
	float fNdotL = SimpleDirLight_Pixel_Phong(
			LightDiff,
			LightSpec,
			L,
			V,
			vNorm,
			g_LightingDiffuse.xyz,
			g_LightingSpecular.xyz*SpecularIntensity,
			Shininiess
		);
	
	// ShadowMapping
	float lightAmount = 1;
	float lightAmbientAmount = 1;
	float shadowDark = 0;

	if(g_ShadowType >= 1)
	{
		float4 lightSpacePos = mul( Pos, g_matViewToLightProj );
		float4 v_shadowCoord = lightSpacePos;
	#ifdef D3D_EFFECT
		v_shadowCoord.xy = v_shadowCoord.xy * 0.5 + 0.5;
		v_shadowCoord.y = 1.0f - v_shadowCoord.y;
	#else
		v_shadowCoord.xy = v_shadowCoord.xy * 0.5 + 0.5;
		v_shadowCoord.z = v_shadowCoord.z * 0.5 + 0.5;
	#endif
		float4 g_shadowOffsets[4] = {
			float4( -0.5, -0.5, 0, 0 ),
			float4( -0.5, 0.5, 0, 0 ),
			float4( 0.5, -0.5, 0, 0 ),
			float4( 0.5, 0.5, 0, 0 )
		};
		float4 pixelSize = float4(1/g_TextureSize.x, 1/g_TextureSize.y, 0, 0);
		lightAmount = 0;
		lightAmount += tex2Dproj(Samp_RT_OpaqueShadowDepth, v_shadowCoord+g_shadowOffsets[0]*pixelSize).x;
		lightAmount += tex2Dproj(Samp_RT_OpaqueShadowDepth, v_shadowCoord+g_shadowOffsets[1]*pixelSize).x;
		lightAmount += tex2Dproj(Samp_RT_OpaqueShadowDepth, v_shadowCoord+g_shadowOffsets[2]*pixelSize).x;
		lightAmount += tex2Dproj(Samp_RT_OpaqueShadowDepth, v_shadowCoord+g_shadowOffsets[3]*pixelSize).x;
		lightAmount *= 0.25f;

		//	ShadowMapping(g_ShadowType, Pos, g_matViewToLightProj, Samp_RT_OpaqueShadowDepth, g_LBRAmount, g_TextureSize, lightAmount, lightAmbientAmount);
		shadowDark = 1 - lightAmount;
		shadowDark = shadowDark * g_ShadowAlpha;
	}


	float3	    LightColor = (LightDiff*(1-shadowDark) + g_LightingAmbient.xyz)*g_Intensity + LightSpec*g_SpecularIntensity;
//	float3	    LightColor = (LightDiff*lightAmount + g_LightingAmbient.xyz*max(0.3f, lightAmbientAmount))*g_Intensity + LightSpec*g_SpecularIntensity;

	float4		Albedo		= tex2D(Samp_MRT_Albedo, uv);

	if(g_LightingMode==0)
	{
		o.Color.xyz = LightColor*Albedo.xyz;
	}
	else
	{
		o.Color.xyz = LightColor;
	}

	if(g_DoEdgeDetect==1)
	{
		float4		EdgeColor = tex2D(Samp_RT_EdgeDetect, Input.UV);
		float edgeLum = GetMax(EdgeColor.r, EdgeColor.g);
		edgeLum = GetMax(edgeLum, EdgeColor.b);
		o.Color.xyz = o.Color.xyz * (1-edgeLum) + EdgeColor.xyz;
	}

	o.Color.w = (shadowDark) * g_ShadowDarkScale;

	return o;
}

#ifdef D3D_EFFECT
technique tech
{
	pass p0
	{
		ZEnable = false;
		ZWriteEnable = false;
		FillMode = Solid;
		VertexShader = compile vs_3_0 vs_main();

		PixelShader = compile ps_3_0 ps_main();
	}
}
#endif